zEnc={
    info:{
        version:0.2,
        developer:"AlyaSs Faisal [ComputerMan]",
		IDE:"Win8.1, Chromium v69 Dev Tools",
        project:"zEncoder JS Lib"
    },
    map:{
        zEncoding:{a:"#@#",b:"#@@#",c:"$@@$",d:"$@@@$",e:"%###%",f:"%####%",g:"[-]",h:"[/-*-/]",i:"&%%%%&",j:"&%%%&",k:"*^^^^*",l:"*^^^*",m:"(&&&&(",n:"(&&&(",o:")****)",p:")***)",q:"_((((_",r:"_(((_",s:"/-*-/))))/-*-/",t:"/-*-/)))/-*-/",u:"|____|",v:"|___|",w:"!====!",x:"!===!",y:"@\\\\@",z:"@\\\@",A:"/-*-/#@#",B:"/-*-/#@@#",C:"/-*-/$@@$",D:"/-*-/$@@@$",E:"/-*-/%###%",F:"/-*-/%####%",G:"/-*-/[-]",H:"/-*-/[/-*-/]",I:"/-*-/&%%%%&",J:"/-*-/&%%%&",K:"/-*-/*^^^^*",L:"/-*-/*^^^*",M:"/-*-/(&&&&(",N:"/-*-/(&&&(",O:"/-*-/)****)",P:"/-*-/)***)",Q:"/-*-/_((((_",R:"/-*-/_(((_",S:"/-*-//-*-/))))/-*-/",T:"/-*-//-*-/)))/-*-/",U:"/-*-/|____|",V:"/-*-/|___|",W:"/-*-/!====!",X:"/-*-/!===!",Y:"/-*-/@\\\\@",Z:"/-*-/@\\\@",n0:'/*/*/',n1:'-/-*-/-/-*-/-',n2:'|||||',n3:'~~~~~',n4:'>?>?>',n5:'<:<:<',n6:',;,;,',n7:']/[/]',n8:'{#;}',n9:'<;?">'},
		
		atbash:{a:"z",b:"y",c:"x",d:"w",e:"v",f:"u",g:"t",h:"s",i:"r",j:"q",k:"p",l:"o",m:"n",n:"m",o:"l",p:"k",q:"j",r:"i",s:"h",t:"g",u:"f",v:"e",w:"d",x:"c",y:"b",z:"a",A:"Z",B:"Y",C:"X",D:"W",E:"V",F:"U",G:"T",H:"S",I:"R",J:"Q",K:"P",L:"O",M:"N",N:"M",O:"L",P:"K",Q:"J",R:"I",S:"H",T:"G",U:"F",V:"E",W:"D",X:"C",Y:"B",Z:"A"},
		
		yoliousgaiser:{a:"d",b:"e",c:"f",d:"g",e:"h",f:"i",g:"j",h:"k",i:"l",j:"m",k:"n",l:"o",m:"p",n:"q",o:"r",p:"s",q:"t",r:"u",s:"v",t:"w",u:"x",v:"y",w:"z",x:"a",y:"b",z:"c",A:"D",B:"E",C:"F",D:"G",E:"H",F:"I",G:"J",H:"K",I:"L",J:"M",K:"N",L:"O",M:"P",N:"Q",O:"R",P:"S",Q:"T",R:"U",S:"V",T:"W",U:"X",V:"Y",W:"Z",X:"A",Y:"B",Z:"C",
		
        reverse:{a:"x",b:"y",c:"z",d:"a",e:"b",f:"c",g:"d",h:"e",i:"f",j:"g",k:"h",l:"i",m:"j",n:"k",o:"l",p:"m",q:"n",r:"o",s:"p",t:"q",u:"r",v:"s",w:"t",x:"u",y:"v",z:"w",A:"X",B:"Y",C:"Z",D:"A",E:"B",F:"C",G:"D",H:"E",I:"F",J:"G",K:"H",L:"I",M:"J",N:"K",O:"L",P:"M",Q:"N",R:"O",S:"P",T:"Q",U:"R",V:"S",W:"T",X:"U",Y:"V",Z:"W"}
		}
    },
	call:{
		zEncode:function(text,mode){
			//1:enocde 2:decode
		if(!mode){
				return console.error("no mode is prevented, modes=1:enocde 2:decode");
			}else if(!text){
				return console.error("no text is prevented, e.g.'Hello World'");
			}
		data=text;
		if(mode==1){
		while(data.includes(" ")){
                data=data.replace(" ","#-#");
        }
        while(data.includes("+")){
                data=data.replace("+","/#-#/");
        }
        while(data.includes(0)){
                data=data.replace(0,zEnc.map.zEncoding.n0);
        }                           
        while(data.includes(1)){    
                data=data.replace(1,zEnc.map.zEncoding.n1);
        }                           
        while(data.includes(2)){    
                data=data.replace(2,zEnc.map.zEncoding.n2);
        }                           
        while(data.includes(3)){    
                data=data.replace(3,zEnc.map.zEncoding.n3);
        }                           
        while(data.includes(4)){    
                data=data.replace(4,zEnc.map.zEncoding.n4);
        }                           
        while(data.includes(5)){    
                data=data.replace(5,zEnc.map.zEncoding.n5);
        }                           
        while(data.includes(6)){    
                data=data.replace(6,zEnc.map.zEncoding.n6);
        }                           
        while(data.includes(7)){    
                data=data.replace(7,zEnc.map.zEncoding.n7);
        }                           
        while(data.includes(8)){    
                data=data.replace(8,zEnc.map.zEncoding.n8);
        }                           
        while(data.includes(9)){    
                data=data.replace(9,zEnc.map.zEncoding.n9);
        }
        while(data.includes("a")){
            data=data.replace("a",zEnc.map.zEncoding.a);
        }                         
        while(data.includes("b")){
            data=data.replace("b",zEnc.map.zEncoding.b);
        }                         
        while(data.includes("c")){
            data=data.replace("c",zEnc.map.zEncoding.c);
        }                         
        while(data.includes("d")){
            data=data.replace("d",zEnc.map.zEncoding.d);
        }                         
        while(data.includes("e")){
            data=data.replace("e",zEnc.map.zEncoding.e);
        }                         
        while(data.includes("f")){
            data=data.replace("f",zEnc.map.zEncoding.f);
        }                         
        while(data.includes("g")){
            data=data.replace("g",zEnc.map.zEncoding.g);
        }                         
        while(data.includes("h")){
            data=data.replace("h",zEnc.map.zEncoding.h);
        }                         
        while(data.includes("i")){
            data=data.replace("i",zEnc.map.zEncoding.i);
        }                         
        while(data.includes("j")){
            data=data.replace("j",zEnc.map.zEncoding.j);
        }                         
        while(data.includes("k")){
            data=data.replace("k",zEnc.map.zEncoding.k);
        }                         
        while(data.includes("l")){
            data=data.replace("l",zEnc.map.zEncoding.l);
        }                         
        while(data.includes("m")){
            data=data.replace("m",zEnc.map.zEncoding.m);
        }                         
        while(data.includes("n")){
            data=data.replace("n",zEnc.map.zEncoding.n);
        }                         
        while(data.includes("o")){
            data=data.replace("o",zEnc.map.zEncoding.o);
        }                         
        while(data.includes("p")){
            data=data.replace("p",zEnc.map.zEncoding.p);
        }                         
        while(data.includes("q")){
            data=data.replace("q",zEnc.map.zEncoding.q);
        }                         
        while(data.includes("r")){
            data=data.replace("r",zEnc.map.zEncoding.r);
        }                         
        while(data.includes("s")){
            data=data.replace("s",zEnc.map.zEncoding.s);
        }                         
        while(data.includes("t")){
            data=data.replace("t",zEnc.map.zEncoding.t);
        }                         
        while(data.includes("u")){
            data=data.replace("u",zEnc.map.zEncoding.u);
        }                         
        while(data.includes("v")){
            data=data.replace("v",zEnc.map.zEncoding.v);
        }                         
        while(data.includes("w")){
            data=data.replace("w",zEnc.map.zEncoding.w);
        }                         
        while(data.includes("x")){
            data=data.replace("x",zEnc.map.zEncoding.x);
        }                         
        while(data.includes("y")){
            data=data.replace("y",zEnc.map.zEncoding.y);
        }                         
        while(data.includes("z")){
            data=data.replace("z",zEnc.map.zEncoding.z);
        }
        while(data.includes("a".toUpperCase())){
            data=data.replace("a".toUpperCase(),zEnc.map.zEncoding.A);
        }                                       
        while(data.includes("b".toUpperCase())){
            data=data.replace("b".toUpperCase(),zEnc.map.zEncoding.B);
        }                                       
        while(data.includes("c".toUpperCase())){
            data=data.replace("c".toUpperCase(),zEnc.map.zEncoding.C);
        }                                       
        while(data.includes("d".toUpperCase())){
            data=data.replace("d".toUpperCase(),zEnc.map.zEncoding.D);
        }                                       
        while(data.includes("e".toUpperCase())){
            data=data.replace("e".toUpperCase(),zEnc.map.zEncoding.E);
        }                                       
        while(data.includes("f".toUpperCase())){
            data=data.replace("f".toUpperCase(),zEnc.map.zEncoding.F);
        }                                       
        while(data.includes("g".toUpperCase())){
            data=data.replace("g".toUpperCase(),zEnc.map.zEncoding.G);
        }                                       
        while(data.includes("h".toUpperCase())){
            data=data.replace("h".toUpperCase(),zEnc.map.zEncoding.H);
        }                                       
        while(data.includes("i".toUpperCase())){
            data=data.replace("i".toUpperCase(),zEnc.map.zEncoding.I);
        }                                       
        while(data.includes("j".toUpperCase())){
            data=data.replace("j".toUpperCase(),zEnc.map.zEncoding.J);
        }                                       
        while(data.includes("k".toUpperCase())){
            data=data.replace("k".toUpperCase(),zEnc.map.zEncoding.K);
        }                                       
        while(data.includes("l".toUpperCase())){
            data=data.replace("l".toUpperCase(),zEnc.map.zEncoding.L);
        }                                       
        while(data.includes("m".toUpperCase())){
            data=data.replace("m".toUpperCase(),zEnc.map.zEncoding.M);
        }                                       
        while(data.includes("n".toUpperCase())){
            data=data.replace("n".toUpperCase(),zEnc.map.zEncoding.N);
        }                                       
        while(data.includes("o".toUpperCase())){
            data=data.replace("o".toUpperCase(),zEnc.map.zEncoding.O);
        }                                       
        while(data.includes("p".toUpperCase())){
            data=data.replace("p".toUpperCase(),zEnc.map.zEncoding.P);
        }                                       
        while(data.includes("q".toUpperCase())){
            data=data.replace("q".toUpperCase(),zEnc.map.zEncoding.Q);
        }                                       
        while(data.includes("r".toUpperCase())){
            data=data.replace("r".toUpperCase(),zEnc.map.zEncoding.R);
        }                                       
        while(data.includes("s".toUpperCase())){
            data=data.replace("s".toUpperCase(),zEnc.map.zEncoding.S);
        }                                       
        while(data.includes("t".toUpperCase())){
            data=data.replace("t".toUpperCase(),zEnc.map.zEncoding.T);
        }                                       
        while(data.includes("u".toUpperCase())){
            data=data.replace("u".toUpperCase(),zEnc.map.zEncoding.U);
        }                                       
        while(data.includes("v".toUpperCase())){
            data=data.replace("v".toUpperCase(),zEnc.map.zEncoding.V);
        }                                       
        while(data.includes("w".toUpperCase())){
            data=data.replace("w".toUpperCase(),zEnc.map.zEncoding.W);
        }                                       
        while(data.includes("x".toUpperCase())){
            data=data.replace("x".toUpperCase(),zEnc.map.zEncoding.X);
        }                                       
        while(data.includes("y".toUpperCase())){
            data=data.replace("y".toUpperCase(),zEnc.map.zEncoding.Y);
        }                                       
        while(data.includes("z".toUpperCase())){
            data=data.replace("z".toUpperCase(),zEnc.map.zEncoding.Z);
        }
        return data;
        }else if(mode==2){
        data=text;
        while(data.includes("#-#")){
            data=data.replace("#-#"," ");
        }
        while(data.includes("/#-#/")){
            data=data.replace("/#-#/","+");
        }
		while(data.includes(zEnc.map.zEncoding.n0)){
            data=data.replace(zEnc.map.zEncoding.n0,0);
        }                         
        while(data.includes(zEnc.map.zEncoding.n1)){ 
            data=data.replace(zEnc.map.zEncoding.n1,1);
        }                         
        while(data.includes(zEnc.map.zEncoding.n2)){ 
            data=data.replace(zEnc.map.zEncoding.n2,2);
        }                         
        while(data.includes(zEnc.map.zEncoding.n3)){ 
            data=data.replace(zEnc.map.zEncoding.n3,3);
        }                         
        while(data.includes(zEnc.map.zEncoding.n4)){ 
            data=data.replace(zEnc.map.zEncoding.n4,4);
        }                         
        while(data.includes(zEnc.map.zEncoding.n5)){ 
            data=data.replace(zEnc.map.zEncoding.n5,5);
        }                         
        while(data.includes(zEnc.map.zEncoding.n6)){ 
            data=data.replace(zEnc.map.zEncoding.n6,6);
        }                         
        while(data.includes(zEnc.map.zEncoding.n7)){ 
            data=data.replace(zEnc.map.zEncoding.n7,7);
        }                         
        while(data.includes(zEnc.map.zEncoding.n8)){ 
            data=data.replace(zEnc.map.zEncoding.n8,8);
        }                         
        while(data.includes(zEnc.map.zEncoding.n9)){ 
            data=data.replace(zEnc.map.zEncoding.n9,9);
        }
        while(data.includes(zEnc.map.zEncoding.a)){
            data=data.replace(zEnc.map.zEncoding.a,"a");
        }                         
        while(data.includes(zEnc.map.zEncoding.b)){  
            data=data.replace(zEnc.map.zEncoding.b,"b");
        }                         
        while(data.includes(zEnc.map.zEncoding.c)){  
            data=data.replace(zEnc.map.zEncoding.c,"c");
        }                         
        while(data.includes(zEnc.map.zEncoding.d)){  
            data=data.replace(zEnc.map.zEncoding.d,"d");
        }                         
        while(data.includes(zEnc.map.zEncoding.e)){  
            data=data.replace(zEnc.map.zEncoding.e,"e");
        }                         
        while(data.includes(zEnc.map.zEncoding.f)){  
            data=data.replace(zEnc.map.zEncoding.f,"f");
        }                         
        while(data.includes(zEnc.map.zEncoding.g)){  
            data=data.replace(zEnc.map.zEncoding.g,"g");
        }                         
        while(data.includes(zEnc.map.zEncoding.h)){  
            data=data.replace(zEnc.map.zEncoding.h,"h");
        }                         
        while(data.includes(zEnc.map.zEncoding.i)){  
            data=data.replace(zEnc.map.zEncoding.i,"i");
        }                         
        while(data.includes(zEnc.map.zEncoding.j)){  
            data=data.replace(zEnc.map.zEncoding.j,"j");
        }                         
        while(data.includes(zEnc.map.zEncoding.k)){  
            data=data.replace(zEnc.map.zEncoding.k,"k");
        }                         
        while(data.includes(zEnc.map.zEncoding.l)){  
            data=data.replace(zEnc.map.zEncoding.l,"l");
        }                         
        while(data.includes(zEnc.map.zEncoding.m)){  
            data=data.replace(zEnc.map.zEncoding.m,"m");
        }                         
        while(data.includes(zEnc.map.zEncoding.n)){  
            data=data.replace(zEnc.map.zEncoding.n,"n");
        }                         
        while(data.includes(zEnc.map.zEncoding.o)){  
            data=data.replace(zEnc.map.zEncoding.o,"o");
        }                         
        while(data.includes(zEnc.map.zEncoding.p)){  
            data=data.replace(zEnc.map.zEncoding.p,"p");
        }                         
        while(data.includes(zEnc.map.zEncoding.q)){  
            data=data.replace(zEnc.map.zEncoding.q,"q");
        }                         
        while(data.includes(zEnc.map.zEncoding.r)){  
            data=data.replace(zEnc.map.zEncoding.r,"r");
        }                         
        while(data.includes(zEnc.map.zEncoding.s)){  
            data=data.replace(zEnc.map.zEncoding.s,"s");
        }                         
        while(data.includes(zEnc.map.zEncoding.t)){  
            data=data.replace(zEnc.map.zEncoding.t,"t");
        }                         
        while(data.includes(zEnc.map.zEncoding.u)){  
            data=data.replace(zEnc.map.zEncoding.u,"u");
        }                         
        while(data.includes(zEnc.map.zEncoding.v)){  
            data=data.replace(zEnc.map.zEncoding.v,"v");
        }                         
        while(data.includes(zEnc.map.zEncoding.w)){  
            data=data.replace(zEnc.map.zEncoding.w,"w");
        }                         
        while(data.includes(zEnc.map.zEncoding.x)){  
            data=data.replace(zEnc.map.zEncoding.x,"x");
        }                         
        while(data.includes(zEnc.map.zEncoding.y)){  
            data=data.replace(zEnc.map.zEncoding.y,"y");
        }                         
        while(data.includes(zEnc.map.zEncoding.z)){  
            data=data.replace(zEnc.map.zEncoding.z,"z");
        }
		while(data.includes(zEnc.map.zEncoding.A)){
            data=data.replace(zEnc.map.zEncoding.A,"A");
        }                       
        while(data.includes(zEnc.map.zEncoding.B)){ 
            data=data.replace(zEnc.map.zEncoding.B,"B");
        }                       
        while(data.includes(zEnc.map.zEncoding.C)){ 
            data=data.replace(zEnc.map.zEncoding.C,"C");
        }                       
        while(data.includes(zEnc.map.zEncoding.D)){ 
            data=data.replace(zEnc.map.zEncoding.D,"D");
        }                       
        while(data.includes(zEnc.map.zEncoding.E)){ 
            data=data.replace(zEnc.map.zEncoding.E,"E");
        }                       
        while(data.includes(zEnc.map.zEncoding.F)){ 
            data=data.replace(zEnc.map.zEncoding.F,"F");
        }                       
        while(data.includes(zEnc.map.zEncoding.G)){ 
            data=data.replace(zEnc.map.zEncoding.G,"G");
        }                       
        while(data.includes(zEnc.map.zEncoding.H)){ 
            data=data.replace(zEnc.map.zEncoding.H,"H");
        }                       
        while(data.includes(zEnc.map.zEncoding.I)){ 
            data=data.replace(zEnc.map.zEncoding.I,"I");
        }                       
        while(data.includes(zEnc.map.zEncoding.J)){ 
            data=data.replace(zEnc.map.zEncoding.J,"J");
        }                       
        while(data.includes(zEnc.map.zEncoding.K)){ 
            data=data.replace(zEnc.map.zEncoding.K,"K");
        }                       
        while(data.includes(zEnc.map.zEncoding.L)){ 
            data=data.replace(zEnc.map.zEncoding.L,"L");
        }                       
        while(data.includes(zEnc.map.zEncoding.M)){ 
            data=data.replace(zEnc.map.zEncoding.M,"M");
        }                       
        while(data.includes(zEnc.map.zEncoding.N)){ 
            data=data.replace(zEnc.map.zEncoding.N,"N");
        }                       
        while(data.includes(zEnc.map.zEncoding.O)){ 
            data=data.replace(zEnc.map.zEncoding.O,"O");
        }                       
        while(data.includes(zEnc.map.zEncoding.P)){ 
            data=data.replace(zEnc.map.zEncoding.P,"P");
        }                       
        while(data.includes(zEnc.map.zEncoding.Q)){ 
            data=data.replace(zEnc.map.zEncoding.Q,"Q");
        }                       
        while(data.includes(zEnc.map.zEncoding.R)){ 
            data=data.replace(zEnc.map.zEncoding.R,"R");
        }                       
        while(data.includes(zEnc.map.zEncoding.S)){ 
            data=data.replace(zEnc.map.zEncoding.S,"S");
        }                       
        while(data.includes(zEnc.map.zEncoding.T)){ 
            data=data.replace(zEnc.map.zEncoding.T,"T");
        }                       
        while(data.includes(zEnc.map.zEncoding.U)){ 
            data=data.replace(zEnc.map.zEncoding.U,"U");
        }                       
        while(data.includes(zEnc.map.zEncoding.V)){ 
            data=data.replace(zEnc.map.zEncoding.V,"V");
        }                       
        while(data.includes(zEnc.map.zEncoding.W)){ 
            data=data.replace(zEnc.map.zEncoding.W,"W");
        }                       
        while(data.includes(zEnc.map.zEncoding.X)){ 
            data=data.replace(zEnc.map.zEncoding.X,"X");
        }                       
        while(data.includes(zEnc.map.zEncoding.Y)){ 
            data=data.replace(zEnc.map.zEncoding.Y,"Y");
        }                       
        while(data.includes(zEnc.map.zEncoding.Z)){ 
            data=data.replace(zEnc.map.zEncoding.Z,"Z");
        }
        while(data.includes("/-*-/a")){
            data=data.replace("/-*-/a","A");
        }                               
        while(data.includes("/-*-/b")){ 
            data=data.replace("/-*-/b","B");
        }                               
        while(data.includes("/-*-/c")){ 
            data=data.replace("/-*-/c","C");
        }                               
        while(data.includes("/-*-/d")){ 
            data=data.replace("/-*-/d","D");
        }                               
        while(data.includes("/-*-/e")){ 
            data=data.replace("/-*-/e","E");
        }                               
        while(data.includes("/-*-/f")){ 
            data=data.replace("/-*-/f","F");
        }                               
        while(data.includes("/-*-/g")){ 
            data=data.replace("/-*-/g","G");
        }                               
        while(data.includes("/-*-/h")){ 
            data=data.replace("/-*-/h","H");
        }                               
        while(data.includes("/-*-/i")){ 
            data=data.replace("/-*-/i","I");
        }                               
        while(data.includes("/-*-/j")){ 
            data=data.replace("/-*-/j","J");
        }                               
        while(data.includes("/-*-/k")){ 
            data=data.replace("/-*-/k","K");
        }                               
        while(data.includes("/-*-/l")){ 
            data=data.replace("/-*-/l","L");
        }                               
        while(data.includes("/-*-/m")){ 
            data=data.replace("/-*-/m","M");
        }                               
        while(data.includes("/-*-/n")){ 
            data=data.replace("/-*-/n","N");
        }                               
        while(data.includes("/-*-/o")){ 
            data=data.replace("/-*-/o","O");
        }                               
        while(data.includes("/-*-/p")){ 
            data=data.replace("/-*-/p","P");
        }                               
        while(data.includes("/-*-/q")){ 
            data=data.replace("/-*-/q","Q");
        }                               
        while(data.includes("/-*-/r")){ 
            data=data.replace("/-*-/r","R");
        }                               
        while(data.includes("/-*-/s")){ 
            data=data.replace("/-*-/s","S");
        }                               
        while(data.includes("/-*-/t")){ 
            data=data.replace("/-*-/t","T");
        }                               
        while(data.includes("/-*-/u")){ 
            data=data.replace("/-*-/u","U");
        }                               
        while(data.includes("/-*-/v")){ 
            data=data.replace("/-*-/v","V");
        }                               
        while(data.includes("/-*-/w")){ 
            data=data.replace("/-*-/w","W");
        }                               
        while(data.includes("/-*-/x")){ 
            data=data.replace("/-*-/x","X");
        }                               
        while(data.includes("/-*-/y")){ 
            data=data.replace("/-*-/y","Y");
        }                               
        while(data.includes("/-*-/z")){ 
            data=data.replace("/-*-/z","Z");
        }
        return data;
        }
		},
		atbash:function(text){
			if(!text){
				return console.error("no text is prevented, e.g.'Hello World'");
			}
			data=text;
			outdata="";
			seek=0;
			maxseek=data.length-1;
			while(seek<=maxseek){
                if(data.charAt(seek) in zEnc.map.atbash){
                        outdata=outdata+zEnc.map.atbash[data.charAt(seek)];
                }else{
                        outdata=outdata+data.charAt(seek);
                }
                seek++;
			}
        return outdata;
		},
		URI:function(text,mode){
			if(!mode){
				return console.error("no mode is prevented, modes=1:enocde 2:decode");
			}else if(!text){
				return console.error("no text is prevented, e.g.'Hello World'");
			}
			if(mode==1){
                data=text;
                data=encodeURIComponent(data);
                return data;
			}else if(mode==2){
                data=text;
                data=decodeURIComponent(data);
				return data;
			}
		},
		yoliousgaiser:function(text,mode){
			if(!mode){
				return console.error("no mode is prevented, modes=1:enocde 2:decode");
			}else if(!text){
				return console.error("no text is prevented, e.g.'Hello World'");
			}
			data=text;
			outdata="";
			seek=0;
			maxseek=data.length-1;
			if(mode==1){
                while(seek<=maxseek){
                        if(data.charAt(seek) in zEnc.map.yoliousgaiser){
                                outdata=outdata+zEnc.map.yoliousgaiser[data.charAt(seek)];
                        }else{
                                outdata=outdata+data.charAt(seek);
                        }
                        seek++;
                }
                return outdata;
			}else if(mode==2){
                while(seek<=maxseek){
                        if(data.charAt(seek) in zEnc.map.yoliousgaiser.reverse){
                                outdata=outdata+zEnc.map.yoliousgaiser.reverse[data.charAt(seek)];
                        }else{
                                outdata=outdata+data.charAt(seek);
                        }
                        seek++;
                }
                return outdata;
			}
        
		},
		binary:function(text,mode){
			if(!mode){
				return console.error("no mode is prevented, modes=1:enocde 2:decode");
			}else if(!text){
				return console.error("no text is prevented, e.g.'Hello World'");
			}
		},
		hex:function(text,mode){
			if(!mode){
				return console.error("no mode is prevented, modes=1:enocde 2:decode");
			}else if(!text){
				return console.error("no text is prevented, e.g.'Hello World'");
			}
		}
	}
};
